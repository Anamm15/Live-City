// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum EconomicStatus {
  UPPER
  UPPER_MIDDLE
  MIDDLE
  LOWER_MIDDLE
  LOWER
  UNKNOWN
}

enum Gender {
  MALE
  FEMALE
}

enum Religion {
  ISLAM
  CHRISTIAN
  CATHOLIC
  HINDU
  BUDDHIST
  CONFUCIAN
  JUDAISM
}

enum MaritalStatus {
  NEVER_MARRIED
  MARRIED
  DIVORCED
  WIDOWED
}

enum Education {
  ELEMENTARY
  MIDDLE_SCHOOL
  HIGH_SCHOOL
  DIPLOMA_3
  DIPLOMA_4
  BACHELOR
  MASTER
  DOCTORATE
  NO_SCHOOLING
}

enum Occupation {
  EMPLOYED
  STUDENT
  RETIRED
  ENTREPRENEUR
  UNEMPLOYED
  OTHER
}

enum ReportCategory {
  CLEANLINESS
  SECURITY
  INFRASTRUCTURE
  PUBLIC_SERVICE
  ENVIRONMENT
  SOCIAL
  EDUCATION
  HEALTH
  TRANSPORTATION
  HOUSING
  OTHER
}

enum ReportStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum SubmissionCategory {
  ID_CARD
  FAMILY_CARD
  POLICE_CLEARANCE
  BUSINESS_CERTIFICATE
  DOMICILE_CERTIFICATE
  POVERTY_CERTIFICATE
  EVENT_PERMIT
  MICRO_BUSINESS_LICENSE
  INHERITANCE_CERTIFICATE
  HEIR_CERTIFICATE
  DEATH_CERTIFICATE
  BIRTH_CERTIFICATE
  MARRIAGE_CERTIFICATE
  DIVORCE_CERTIFICATE
  COVER_LETTER
}

enum SubmissionStatus {
  PENDING
  PROCESSING
  REJECTED
  COMPLETED
}

enum PollsType {
  VOTING
  SURVEY
}

enum PollsStatus {
  ACTIVE
  CLOSED
}

enum CommunityRole {
  MEMBER
  ADMIN
  MODERATOR
}

enum FileableType {
  VILLAGE
  FACILITY
  COMMUNITY
  NEWS
  SUBMISSION
  REPORT
  USER
}

model Families {
  id             Int      @id @default(autoincrement())
  familyNumber   String   @unique
  headFamily     String   @db.VarChar(100)
  economicStatus EconomicStatus
  address        String
  users          Users[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime?  @updatedAt
  deletedAt      DateTime?
}

model Users {
  id                     Int           @id @default(autoincrement())
  nationalIdentityNumber String        @db.Char(16)
  name                   String        @db.VarChar(100)
  email                  String?       @unique
  role                   Role          @default(USER)
  password               String        @db.VarChar(255)
  points                 Int           @default(0)
  gender                 Gender
  birthday               DateTime
  birthplace             String
  religion               Religion
  maritalStatus          MaritalStatus?
  education              Education?
  job                    Occupation?
  phoneNumber            String?
  refreshToken           String?
  familyId               Int
  family                 Families      @relation(fields: [familyId], references: [id])
  rewardLogs             RewardLogs[]
  pollVotes              PollVotes[]
  owner                  Communities[]
  communityMemberships   CommunityMembers[]
  submissions            Submissions[]
  reports                Reports[]
  newsComments           NewsComments[]
  newsReactions          NewsReactions[]
  createdAt              DateTime  @default(now())
  updatedAt              DateTime?  @updatedAt
  deletedAt              DateTime?
}

model RewardLogs {
  id          Int     @id @default(autoincrement())
  description String
  points      Int
  userId      Int
  user        Users   @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?  @updatedAt
  deletedAt   DateTime?
}

model Polls {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  type        PollsType
  status      PollsStatus
  options     PollOptions[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?  @updatedAt
  deletedAt   DateTime?
}

model PollOptions {
  id          Int         @id @default(autoincrement())
  label       String
  voteCount   Int         @default(0)
  pollId      Int
  poll        Polls       @relation(fields: [pollId], references: [id])
  votes       PollVotes[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?  @updatedAt
  deletedAt   DateTime?
}

model PollVotes {
  id            Int          @id @default(autoincrement())
  userId        Int
  pollOptionsId Int
  user          Users        @relation(fields: [userId], references: [id])
  option        PollOptions  @relation(fields: [pollOptionsId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?  @updatedAt
  deletedAt     DateTime?

  @@unique([userId, pollOptionsId]) // Opsional: user hanya boleh memilih satu kali pada satu opsi
}

model Communities {
  id          Int                @id @default(autoincrement())
  name        String
  description String
  ownerId     Int
  owner       Users              @relation(fields: [ownerId], references: [id])
  members     CommunityMembers[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?  @updatedAt
  deletedAt   DateTime?
}

model CommunityMembers {
  id            Int         @id @default(autoincrement())
  role          CommunityRole
  joinedAt      DateTime    @default(now())
  communitiesId Int
  userId        Int
  community     Communities @relation(fields: [communitiesId], references: [id])
  user          Users       @relation(fields: [userId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?  @updatedAt
  deletedAt     DateTime?

  @@unique([userId, communitiesId])
}

model Reports {
  id          Int        @id @default(autoincrement())
  title       String
  date        DateTime   @default(now())
  description String
  category    ReportCategory
  status      ReportStatus  @default(PENDING)
  response    String?
  userId      Int
  user        Users      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?  @updatedAt
  deletedAt   DateTime?
}

model Submissions {
  id          Int               @id @default(autoincrement())
  title       String
  date        DateTime          @default(now())
  category    SubmissionCategory
  status      SubmissionStatus  @default(PENDING)
  description String
  userId      Int
  user        Users             @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?  @updatedAt
  deletedAt   DateTime?
}

model News {
  id            Int             @id @default(autoincrement())
  title         String
  date          DateTime        @default(now())
  content       String
  reactionCount Int             @default(0)
  commentCount  Int             @default(0)
  comments      NewsComments[]
  reactions     NewsReactions[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?  @updatedAt
  deletedAt     DateTime?
}

model NewsComments {
  id          Int     @id @default(autoincrement())
  content     String
  userId      Int
  newsId      Int
  user        Users   @relation(fields: [userId], references: [id])
  news        News    @relation(fields: [newsId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?  @updatedAt
  deletedAt   DateTime?
}

model NewsReactions {
  id          Int     @id @default(autoincrement())
  userId      Int
  newsId      Int
  user        Users   @relation(fields: [userId], references: [id])
  news        News    @relation(fields: [newsId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?  @updatedAt
  deletedAt   DateTime?

  @@unique([userId, newsId])
}

model Villages {
  id          Int    @id @default(autoincrement())
  name        String
  postalCode  String
  latitude    Float
  longitude   Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?  @updatedAt
  deletedAt   DateTime?
}

model Facilities {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  latitude    Float
  longitude   Float
  buildDate   DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?  @updatedAt
  deletedAt   DateTime?
}

model Files {
  id           Int       @id @default(autoincrement())
  urlFile      String
  fileableId   Int
  fileableType FileableType
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?  @updatedAt
  deletedAt    DateTime?
}
